trigger:
  branches:
    include:
      - '*'
  paths:
    exclude:
      - docs/*

variables:
  buildConfiguration: 'Release'

stages:
- stage: 'Build'
  displayName: 'Build the web application'
  jobs:
  - job: 'Build'
    displayName: 'Build Job'
    pool:
      vmImage: 'ubuntu-16.04'
      demands:
        - npm

    variables:
      wwwrootDir: 'WebAppScottAllen/wwwroot'
      dotnetSdkVersion: '3.1.100'

    steps:
    - task: UseDotNet@2
      displayName: 'Adding .Net Core to the PATH - Use .NET Core SDK $(dotnetSdkVersion)'
      inputs:
        version: '$(dotnetSdkVersion)'

    - task: Npm@1
      displayName: 'Run npm install'
      inputs:
        verbose: false

    - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
      displayName: 'Write build info'
      workingDirectory: $(wwwrootDir)

    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    

    #- task: InstallFortifySCA@5
    #  inputs:
     #   InstallerPath: 'C:\agent_distr\Fortify_SCA_and_Apps_17.10_windows_x64.exe'
      #  LicenseFile: 'C:\agent_distr\fortify.license'
       # RunFortifyRulepackUpdate: false
        #ProxyHost: 'proxy.host.net'
        #ProxyPort: '8080'

    
    #- task: FortifySCA@5
     # inputs:
      #  licenseFile: 'fortify.license'
      #  runBuildTranslate: true
      #  applicationType: 'dotnet'
      #  fortifyProjects: '**\*.sln'
      #  fortifyBuildId: '1.8'
      #  runFortifyRulepackUpdate: true
      #  runFortifyClean: true
      #  scaVerbose: true
      #  scaDebug: true
      #  runFortifyScan: true
      #  fortifyScanType: 'LocalScan'

    #- task: CopyPublishBuildArtifacts@1
    #  inputs:
    #    ArtifactName: 'scaResults'
    #    ArtifactType: 'Container'

    - script: echo 'Testing Print of a Value in pipeline logs using ALWAYS condition'
      displayName: 'Testing an Always Condition Mode for a Task'
      condition: succeeded()

    - task: DotNetCoreCLI@2
      displayName: 'Install ReportGenerator'
      inputs:
        command: custom
        custom: tool
        arguments: 'install --global dotnet-reportgenerator-globaltool'

    - template: buildTemplate.yml
      parameters:
        buildConfiguration: 'Debug'

    - template: buildTemplate.yml
      parameters:
        buildConfiguration: 'Release'


    - task: DotNetCoreCLI@2
      displayName: 'Run unit tests - $(buildConfiguration)'
      inputs:
        command: 'test'
        arguments: '--no-build --configuration Release /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
        publishTestResults: true
        projects: '**/TestingCoreApp.csproj'
      
    - script: reportgenerator -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines
      displayName: 'Create code coverage report'

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage report'
      inputs:
        codeCoverageTool: 'cobertura'
        summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'
      
    - task: UseDotNet@2
      displayName: 'Adding .Net Core 2.0.0 to the PATH to set up Sonar Cloud'
      inputs:
        version: '2.0.0'

    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'SonarCloudServiceConnection'
        organization: $(SonarOrganisation)
        scannerMode: 'CLI'
        configMode: 'file'
      condition: and
        (
          succeeded(),
          eq(variables['Build.Reason'], 'PullRequest'),
          eq(variables['System.PullRequest.TargetBranch'], 'master')
        )

    - task: SonarCloudAnalyze@1
      displayName: 'Run SonarCloud Analysis'
      condition: and
        (
          succeeded(),
          eq(variables['Build.Reason'], 'PullRequest'),
          eq(variables['System.PullRequest.TargetBranch'], 'master')
        )



    
    - task: UseDotNet@2
      displayName: 'Reset .Net Core Framework back to - Use .NET Core SDK $(dotnetSdkVersion)'
      inputs:
        version: '$(dotnetSdkVersion)'


    - template: publishTemplate.yml
      parameters:
        buildConfiguration: 'Debug'

    - template: publishTemplate.yml
      parameters:
        buildConfiguration: 'Release'

    - task: WhiteSource Bolt@20
      displayName: 'Run WhiteSource Bolt'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact To File Share OR Azure Pipeline : drop'
      condition: succeeded()

- stage: 'DevDeploy'
  displayName: 'Deployment to Development'
  dependsOn: Build
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-16.04'
    environment: dev
    variables:
    - group: SamplePipelineVariableGroup
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: website'
            inputs:
              appType: webAppLinux
              azureSubscription: 'ARMConnection'
              appName: '$(WebAppName)'
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'


- stage: 'ProdDeploy'
  displayName: 'Deployment to Prod'
  dependsOn: DevDeploy
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-16.04'
    environment: ProdDirect
    variables:
    - group: SamplePipelineVariableGroup
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: website'
            inputs:
              appType: webAppLinux
              azureSubscription: 'ARMConnection'
              appName: '$(WebAppNameProd)'
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'


- stage: 'AzurePolicyRemediation'
  displayName: 'AzurePolicyRemediation'
  jobs:
  - job: 'AzurePolicyRemediation'
    displayName: 'AzurePolicyRemediation'
    pool:
      vmImage: 'ubuntu-latest'
      demands:
        - npm

    steps:
    - task: AzurePowerShell@5
      inputs:
        azureSubscription: 'ARMConnection'
        ScriptType: 'InlineScript'
        Inline: |
                   
                    Install-Module -Name Az.PolicyInsights -RequiredVersion 1.3.0 -Scope CurrentUser -Force
                    
                    Install-Module -Name Az.Security -RequiredVersion 0.7.8 -Scope CurrentUser -Force
                    
                    Get-InstalledModule -Name Az -AllVersions
                    
                    Get-InstalledModule -Name Az.PolicyInsights -AllVersions
                    
                    Get-InstalledModule -Name Az.Security -AllVersions
                    
                    Get-AzPolicyStateSummary -ResourceGroupName "SampleDevOpsIntegration"
                    
                    $ResourceGroup = Get-AzResourceGroup -Name "SampleDevOpsIntegration"
                    
                    $PolicyAssignment = Get-AzPolicyAssignment -Scope $ResourceGroup.ResourceId -IncludeDescendent
                    
                    $initiative = Get-AzPolicySetDefinition -Name '8df1d260-19be-4d4d-87a8-a95760bff001'
                    
                    foreach ($policy in $initiative.Properties.policyDefinitions) {
                    $eachPolicy =  Get-AzPolicyDefinition -Id $policy.policyDefinitionId
                    
                    if($eachPolicy.Properties.Parameters.effect.defaultValue -eq 'DeployIfNotExists') {
                    $uid = New-Guid
                    
                    $activeRemediation = Get-AzPolicyRemediation | Where-Object {$_.PolicyAssignmentId -eq $PolicyAssignment.PolicyAssignmentId[1] -AND $_.PolicyDefinitionReferenceId -eq $policy.PolicyDefinitionReferenceId -AND $_.ProvisioningState -ne 'Succeeded'}
                    
                    if($activeRemediation -eq $null) {
                    
                    Start-AzPolicyRemediation -Scope '/subscriptions/09e22a67-9479-41ae-8b11-5e070ff85997/resourceGroups/SampleDevOpsIntegration' -PolicyAssignmentId $PolicyAssignment.PolicyAssignmentId[1] -PolicyDefinitionReferenceId $policy.PolicyDefinitionReferenceId -Name "NewRemeadiation-$uid"  -ResourceDiscoveryMode ReEvaluateCompliance
                    
                    }
                    }
                    }
        errorActionPreference: 'SilentlyContinue'
        azurePowerShellVersion: 'LatestVersion'

- stage: 'DevOpsToolKit'
  displayName: 'DevOpsToolKit Run'
  jobs:
  - job: 'DevOpsToolKit'
    displayName: 'DevOpsToolKit Run'
    pool:
      vmImage: 'windows-latest'
      demands:
        - npm

    steps:
    - task: AzSKSVTs@4
      displayName: 'Run AzSK Module to check Subscription Security'
      inputs:
        ConnectedServiceNameARM: 'ARMConnection'
        GenerateMethodParameterSetSelection: 'ResourceGroupName'
        ResourceGroupName: 'SampleDevOpsIntegration'
        SubscriptionId: '09e22a67-9479-41ae-8b11-5e070ff85997'
        EnableGSSscan: true
        AggregateControlsStatus: true

